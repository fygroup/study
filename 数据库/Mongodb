//---启动一个服务-----------------------
mongod --config bin/mongodb.conf
//--- 关闭服务----------------------------------
mongod --config bin/mongodb.conf --shutdown

帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。root和admin也要这么做才能操作其他数据库
例如：
进入
use admin
db.createUser({user:'root',pwd:'123456',roles:[{role:'root',db:'admin'}]})
退出
进入
use admin
db.auth('root','123456')
use test
db.createUser({user:'malx',pwd:'123456',roles:[{role:'readWrite',db:'test'}]})
退出
进入
use test
db.auth('root','123456') //错误 root必须先登录admin,才能进入test


use admin  
db.createUser({user:'superadmin',pwd:'123456', roles:[{role:'root', db:'admin'}]})     ---创建超级管理员用户  
db.createUser({user:'useradmin',pwd:'123456', roles:[{role:'userAdminAnyDatabase', db:'admin'}]})     ---创建用户管理员账户（能查询其他库集合，但不能查询集合内容）  
db.createUser({user:'admin',pwd:'123456', roles:[{role:'readWriteAnyDatabase', db:'admin'}]})     ---创建访问任意库读写的账户  
db.createUser({user:'user1',pwd:'user1',roles:[{role:'readWrite',db:'test'}]})     ---创建只对test库有读写权限的用户  
db.createUser({user:"bkuser2",pwd:"Bkuser2",roles:[{role:"backup",db:"admin"}]})     ---创建用于备份时的用户，如若是恢复权限，则将backup换为restore即可  

用户验证使用
db.auth("admin","admin")


db     ---查看当前所在库  
test  
db.createUser({user:'test1',pwd:'test1',roles:[{role:'readWrite',db:'test'},{role:'read',db:'Johnny'})})  
use Johnny  
Johnny  
db.auth('test1','test1')  
Error:Authentication failed.  
0         ---表示auth验证失败  
use test  
db.auth('test1','test1')  
1          ---表示验证成功  

如果创建1用户多个数据库，需要先进入各个数据库，不同的数据库 也可由相同的名字
use annovar
switched to db annovar
db.createUser({user:'malx1',pwd:'malx1',roles:[{role:'read',db:'annovar'}]})
use test
db.createUser({user:'malx1',pwd:'malx1',roles:[{role:'read',db:'test'}]})
//------禁止直连-----------------------------------
设置mongodb外网禁止访问
启动数据库时，额外添加--bind_ip 127.0.0.1即可
./mongod --bind_ip 127.0.0.1 --dbpath /data/db --auth
//------mongodb分片------------------------------
启动shard serve
mongod --port 27000 --dbpath=/shard0 --logpath=shard0.log --logappend --fork --bind_ip=127.0.0.1
mongod --port 27001 --dbpath=/shard1 --logpath=shard1.log --logappend --fork --bind_ip=127.0.0.1
mongod --port 27002 --dbpath=/shard2 --logpath=shard2.log --logappend --fork --bind_ip=127.0.0.1
mongod --port 27003 --dbpath=/shard3 --logpath=shard3.log --logappend --fork --bind_ip=127.0.0.1
启动Config serve
mongod --port 27104 --dbpath=/config_serve --logpath=/BerryTest/malx/mongodb_shard/log/config_serve.log --logappend --fork --bind_ip=127.0.0.1 --configsvr
启动Route Process
mongos --port 40000 --configdb 127.0.0.1:27104 --fork --logpath=/BerryTest/malx/mongodb_shard/log/route.log --chunkSize 500
加入分片
db.runCommand({ addshard:"localhost:27020" })
指定数据库
db.runCommand({ enablesharding:"test" })
建立索引
db.runCommand({ shardcollection: "test.log", key: { id:1,time:1}})
查看分片信息
sh.status()
删除分片
db.runCommand({"removeshard":"test"})  #注意删除后要查看sh.status() 看看是否删除完毕
//----------------------------------------------






